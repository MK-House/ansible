name: Publish Ansible project
run-name: ${{ github.actor }} is deploying run ${{ github.run_number }}

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  setup-and-run-terraform:
    runs-on: self-hosted

    steps:
      - name: Set up Terraform
        run: |
          # Determine OS and Architecture
          OS=$(uname | tr '[:upper:]' '[:lower:]')
          ARCH=$(uname -m)
          
          if [ "$ARCH" == "x86_64" ]; then
            ARCH="amd64"
          elif [[ "$ARCH" == "arm"* ]]; then
            ARCH="arm"
          fi
          
          # Set paths based on OS
          if [[ "$OS" == "linux" ]]; then
            INSTALL_PATH="$HOME/terraform"
            PROJECT_PATH="$HOME/terraform_project"
          elif [[ "$OS" == "darwin" ]]; then
            INSTALL_PATH="$HOME/terraform"
            PROJECT_PATH="$HOME/terraform_project"
          elif [[ "$OS" == "mingw"* ]] || [[ "$OS" == "cygwin"* ]]; then
            INSTALL_PATH="D:/opt/terraform"
            PROJECT_PATH="D:/usr/local/terraform"
          else
            echo "OS not supported"
            exit 1
          fi
  
          # Download and install Terraform
          if [ ! -f "$INSTALL_PATH/terraform" ]; then
            echo "Terraform not found. Downloading..."
            mkdir -p $INSTALL_PATH
            LATEST_VERSION=$(curl -s https://checkpoint-api.hashicorp.com/v1/check/terraform | jq -r .current_version)
            wget https://releases.hashicorp.com/terraform/${LATEST_VERSION}/terraform_${LATEST_VERSION}_${OS}_${ARCH}.zip
            unzip terraform_${LATEST_VERSION}_${OS}_${ARCH}.zip -d $INSTALL_PATH
            rm terraform_${LATEST_VERSION}_${OS}_${ARCH}.zip
            echo "Terraform downloaded and extracted to $INSTALL_PATH"
          else
            echo "Terraform already exists in $INSTALL_PATH"
          fi
          sudo ln -sf $INSTALL_PATH/terraform /usr/local/bin/terraform
