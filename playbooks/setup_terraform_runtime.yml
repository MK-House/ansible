---
- name: Get the latest release from a GitHub repository
  hosts: all
  become: true
  tasks:
    - name: Get the latest release info
      uri:
        url: "https://api.github.com/repos/{{ github_user }}/{{ github_repo }}/releases/latest"
        method: GET
        headers:
          Accept: "application/vnd.github.v3+json"
        return_content: yes
      register: release_info

    - name: Set release tag variable
      set_fact:
        release_tag: "{{ release_info.json.tag_name }}"

    - name: Download the latest release
      get_url:
        url: "https://github.com/{{ github_user }}/{{ github_repo }}/archive/{{ release_tag }}.tar.gz"
        dest: "/tmp/{{ github_repo }}-{{ release_tag }}.tar.gz"

    - name: Create backup directory
      file:
        path: "/usr/local/{{ github_repo }}_backup"
        state: directory

    - name: Zip the current directory with timestamp
      command: >
        zip -r /usr/local/{{ github_repo }}_backup/{{ github_repo }}_backup_$(date +%Y%m%d%H%M%S).zip /usr/local/{{ github_repo }}
      args:
        creates: "/usr/local/{{ github_repo }}_backup/{{ github_repo }}_backup_$(date +%Y%m%d%H%M%S).zip"

    - name: Find all files and directories inside /usr/local/{{ github_repo }}
      find:
        paths: "/usr/local/{{ github_repo }}"
      register: files_to_remove

    - name: Remove all files and directories inside /usr/local/{{ github_repo }}
      file:
        path: "{{ item.path }}"
        state: absent
      loop: "{{ files_to_remove.files }}"
      become: true

    - name: Unzip the downloaded release
      unarchive:
        src: "/tmp/{{ github_repo }}-{{ release_tag }}.tar.gz"
        dest: "/usr/local/{{ github_repo }}"
        remote_src: yes
        extra_opts: [--strip-components=1]

    - name: Execute the script in su mode
      command: "su -c '/usr/local/{{ github_repo }}/{{ script_file }}'"
      args:
        executable: /bin/bash
      become: true

  vars:
    github_user: "MK-House"
    github_repo: "terraform"
    script_file: "terraform_setup.sh"
